import '@nomiclabs/hardhat-ethers'
import { ethers } from "hardhat";

async function main() {
    //testnet
  const weth = '0x833372E396496F4c6E59F025483099Bc8DbA79F3';
  // const weth = '0x5300000000000000000000000000000000000004';
  console.log('weth addr: ', weth);

  // const wethContract = (await ethers.getContractFactory("IWETH9")).attach(weth)
  // const wethContract = await ethers.getContractAt('IWETH9', weth)
  // const data = wethContract.interface.encodeFunctionData(wethContract.interface.getFunction('deposit'), [])
  // console.log(data)
  // ethers.utils.hexlify(2)
  // var abiCoder =new ethers.utils.AbiCoder()
  // console.log(abiCoder.encode(['string', 'address'], ['2', weth]))
  // return 

  // const routerFactory = (await ethers.getContractFactory("UniversalRouter")).connect(ethers.Signer[0]);
  const routerFactory = await ethers.getContractFactory("UniversalRouter")
  const router = routerFactory.attach('0x323c2c295760d8e1efd22d32d93403e6217b09ed')

  const data = router.interface.encodeFunctionData(router.interface.getFunction('execute(bytes calldata commands, bytes[] calldata inputs, uint256 deadline)'), [
    0x0b08,
    [
        "0x000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000005af3107a4000",
        "0x000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000000000000000000000000000000fb1052395d3f96f00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000833372e396496f4c6e59f025483099bc8dba79f30000000000000000000000009cca0e4958b21458a843f17950ecd92d1b2ae2e3"
    ],

    // "0x0a080c",
    // "0x0a",
    // [
    //   "0x0000000000000000000000009cca0e4958b21458a843f17950ecd92d1b2ae2e3000000000000000000000000ffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000657924990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000323c2c295760d8e1efd22d32d93403e6217b09ed0000000000000000000000000000000000000000000000000000000065519ea100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000041025f28cd3d1dfafbd76fbc994e0f0ce42d819fb8f7ca59601495e9b15013ef55199dd058145717aba8d950f1ec933522c1cdf7414d37c94adb8866db9c03545a1b00000000000000000000000000000000000000000000000000000000000000"
    //   // "0x0000000000000000000000009cca0e4958b21458a843f17950ecd92d1b2ae2e3000000000000000000000000ffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000065787ddd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000323c2c295760d8e1efd22d32d93403e6217b09ed000000000000000000000000000000000000000000000000000000006550f7e500000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000417b76cf5e7050032c63f4f36e71f88d815bbf56185b3dc87e15dc3e8f63ef15b328ebc22afc5d5a9576b7c8cc617c61bc55109aa3a61fe15ae5566412e5f901331c00000000000000000000000000000000000000000000000000000000000000",
    //   // "0x00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000001bc16d674ec8000000000000000000000000000000000000000000000000000000008c4f2d4f5c9300000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000009cca0e4958b21458a843f17950ecd92d1b2ae2e3000000000000000000000000833372e396496f4c6e59f025483099bc8dba79f3",
    //   // "0x000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000008c4f2d4f5c93"
    // ],
    "0x655247ff"
  ]);
  // console.log(data)

  const gas = await ethers.provider.estimateGas({
    from: '0xf2453659235606a2C979E9891412a2Ae711808D3',
    to: '0x323c2c295760d8e1efd22d32d93403e6217b09ed',
    data: data,
    value: '0x5af3107a4000'
  })
  console.log(gas)
  return

    // const ret = await router.supportsInterface(0x654a0063)
    // console.log(ret)
    // return

// console.log(router)
  //   const result = await router.estimateGas.execute(0x0b08,
  //   [
  //     "0x000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000005af3107a4000",
  //     "0x000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000000000000000000000000000000fb1052395d3f96f00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000833372e396496f4c6e59f025483099bc8dba79f30000000000000000000000009cca0e4958b21458a843f17950ecd92d1b2ae2e3"
  // ], 0x655247ff);
  //   console.log(result)
    // await result.sendTransaction.wait()

}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
